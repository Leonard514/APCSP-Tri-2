{
  
    
        "post0": {
            "title": "Vocabulary Notes",
            "content": "Comparison Operators Operators used in programming languages which compare two different values. These can often be used to set up statements which return a boolean value (true/false), which can be stored in variables. All examples below are in (Python)[https://docs.python.org/3/reference/expressions.html] and were checked using the bool() command, which returns the True/False output. | Operator | Function | True output example | False output example | Notes | |-|-|-|-|-| | == | Checks if two values are equal to each other | “Hrar” == “Hrar” ; 1 == 1.0 | “Hrar” == “hrar” ; 1 == 2 | If strings are compared, this is case-sensitive. Follows numerical equivalence if a float and integer is used. Cannot use leading zeros for integers/floats. | | != | Checks if two values are not equal to each other | “Hrar” != “hrar” ; 1 != 2 | “Hrar” != “Hrar” ; 1 != 1.0 | Similar to above | | &lt; | Checks if the left value is less than the right value | 1 &lt; 2 ; “zz” &lt; “hi” | 2 &lt; 1 ; “az” &lt; “hi” ; 2 &lt; 2 | If strings are compared, the string appearing last in alphabetical order is considered less. float(‘NaN’) and decimal.Decimal(‘NaN’) will yield false regardless of what they are compared to. | | &gt; | Checks if the left value is greater than the right value | 2 &gt; 1 ; “az” &gt; “hi” | 1 &gt; 2 ; “zz” &gt; “hi” ; 2 &gt; 2 | Similar to above | | &lt;= | Checks if the left value is less than or equal to the right value | 1 &lt;= 2 ; “zz” &lt;= ; “hi” ; 2 &lt;= 2 | 2 &lt;= 1 ; “az” &lt;= “hi” | Similar to above | | &gt;= | Checks if the left value is greater than or equal to the right value | 2 &gt;= 1 ; “az” &gt;= “hi” ; 2 &gt;= 2 | 1 &gt;= 2 ; “zz” &gt;= “hi” | Similar to above | | in/not in | Checks if the specified value is an element in the specified list. in returns true if the element is in the list; not in returns true if the element is not in the list. Example: List = [1, 3, 5, 7, 9, “hi”] | 1 in List ; 3 in List ; 5 in List ; “hi” in List ; “What” not in List ; “Why” not in List | 2 in List ; 4 in List ; 6 in List ; 9 not in List ; 7 not in List ; “Weird” in List | As usual, strings are case-sensitive. May be useful for conditional statements. | | . | Boolean Expressions and Selection The value of a boolean variable (True/False) can be used as conditions in selection (often known as if statements). The condition of the if statement is the boolean variable; if its value is True, the condition passes. A possible function of this is in Python code below | . | . # Assume the grade was calculated by a computer program # The bool command is here to make a boolean variable # In a larger computer program, the value was likely # generated by previous commands Grade = 89.49 isA = bool(Grade &gt;= 90) if isA: print(“Yay!”) else: print(“hmm”) . Output: hmm . Booleans Expressions and Iteration Certain forms of iteration (specifically while loops in Python) can use a boolean variable as a condition (similar to selection commands). As you may expect, the while loop executes commands until the value of the variable is false. In terms of a computer program, this could perhaps be used to execute commands critical for maintaining a certain process until that process is no longer needed. This could also potentially be used to periodically send notifications until a certain condition is met (ex: an assignment is submitted). Here’s some informal python code: | . | . num = 10 correct = bool(num &gt; 0) while correct: print(num) num = num - 1 correct = bool(num &gt; 0) . output: 10 9 8 7 6 5 4 3 2 1 . Truth Tables: A table for a logical operator (ex: AND, OR, XOR) containing each variable and all possible input and output results of that operator. | . AND TABLE: All inputs must be true to return output of true. . Input 1 Input 2 Output . False | False | False | . False | True | False | . True | False | False | . True | True | True | . OR TABLE: At least one input must be true to return output of true. . Input 1 Input 2 Output . False | False | False | . False | True | True | . True | False | True | . True | True | True | . XOR TABLE: Exactly one input must be true to return output of true. . Input 1 Input 2 Output . False | False | False | . False | True | True | . True | False | True | . True | True | False | . Characters The units which make up a string. These can be letters, numbers, special symbols (!@#$%^&amp;*), or even spaces. Regardless, if one types, each keystroke outputs one character. | Ex: “keyboard hi!!!” has 14 characters: 10 letters, three exclamation marks, and a space. | . | Strings A variable data type which consists of a combination of letters, numbers, and other special characters (ex: @#$%^&amp;*). They are seen inside quotation marks, and operators cannot affect any numbers in the string. stringVar = &quot;Hello World!&quot; . | “Hello World!” is a string | . | Length The number of elements in a list. Here’s an example in Python: numList = [1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1] . | This list has a length of 17 because it has 17 elements. Each element is separated by a comma. | . | Concatenation: the act of joining two strings into a single string. Often, these strings are printed to an output terminal/console. Here’s an example in pseudocode: | . concat(“tri”, “llion”) . This concatenates the strings “tri” and “llion”, making a new string “trillion”. . | Upper, Lower, Traversing Strings . The first two (upper and lower) seem to be referring to Python methods. They are quite simple. I think it would be easiest to explain with a demonstration: | . | . String = “WhYaReWeDoInGtHiS” print(string) print(string.upper()) print(string.lower()) . Output: WhYaReWeDoInGtHiS WHYAREWEDOINGTHIS whyarewedoingthis . Relatively intuitive. The upper() method changes all lowercase letters in a string to uppercase, while the lower() method does the opposite. A potential reason for this would be ensuring uniform case (especially of uppercase when making important headings like page/screen titles) . Traversing strings behaves highly similar to iterating elements in a list, except that instead of iterating through a list, it’s a string. Elements in a list are now the characters of a string. A potential application of this could be to search all strings for a specific substring. Here’s some example python code: | . #Very informative example here: #https://www.geeksforgeeks.org/iterate-over-characters-of-a-string-in-python/ String = “Thirty Trillion Dollars” for i in String: if i == “T” print(“T detected!”) . Output: T detected! T detected! . Python If, Elif, Else conditionals Python if statements execute associated lines of code if the if condition is satisfied. | If the if condition is not satisfied, an Elif statement is executed as fallback… with another condition and associated commands. | If all associated Elif conditions are not satisfied, there can be an else statement which unconditionally executes associated commands. input = input(“enter a string”) if input == “Hi”: print(“Hello World!”) print(“How are you doing today?”) elif input == “Why”: print(“That’s a good question to ask about everything that happens.”) elif input == “Who are you”: print(“I’m an anonymous guest. Pleased to meet you.”) else: print(“Have a great day!”) . | This code uses if statements and elif statements to return strings for three special inputs (“Hi,” “Why,” “Who are you”). If the input were any of those strings, the associated command would be executed. Otherwise, the command associated with the else statement (which prints “Have a great day!”) would be executed. | . | .",
            "url": "https://leonard514.github.io//APCSP-Tri-2/notes/vocab",
            "relUrl": "/notes/vocab",
            "date": " • Dec 6, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Schedule",
          "content": ". Unit 4: Algorithmic Programming . Trimester 2 begins with student teaching and a focus on algorithms. Each week a “Student Team” has a teaching assignment supported by College Board materials. Additionally, the Teacher is providing Career Tech mini-labs that correspond to one or more topics for the week. Use the two things together as you improve your learning experience, Frontend blog and Jupyter Notebooks. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 13 | | | | | . 14 | | | | | . 15 | | | | | . 16 | | | | | . . Unit 3: N@tM Project, Web, Systems, and Data . The beginning of Trimester 2 is focussed on Algorithms and Coding. Student need to build their own portfolio. That portfolio should focus on their interests in Python and JavaScript programming. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 8 | | | | | . 9 | | | | | . 10 | | | | | . 11 | | | | | . 12 | | | | | . . Unit 2: Introduction to Web Development . Websites are made up of several key parts: Frontend, Backend, Data and Deployment. The focus for these weeks is to enable students to perform the aspects of constructing and deploying a simple Website. Fastpages got us started on these concepts, but now we will start building a Website from the ground up. Once again, there will be a lot of learning focused tools and getting things working. But, by the end of the Unit, students will be ready to start many of the technical coding aspects of Web Development, having established a Deployed Website. On Nov 3rd our Trimester work will end with a project and student participation in Electives Department “Night at the Museum” (N@tM). . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 4 | | | | | . 5 | | | - Frontend | | . 6 | | | | | . 7 | | | - API | | . . Unit 1: Introduction to Tools and Resources . The initial weeks focus on introducing Tools, Pair Programming, and the AP Resources that we plan to use throughout the year. At the end of Weeks 0-3, students will be exposed to blogging with GitHub Pages; developing with Jupyter Notebooks, Python, JavaScript, HTML, and Code.org AppLab; working with AP classroom and becoming familiar with Create Performance Task project requirements. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 0 | | | | | . 1 | | | | | . 2 | | | | | . 3 | | | | | .",
          "url": "https://leonard514.github.io//APCSP-Tri-2/schedule",
          "relUrl": "/schedule",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Frontend",
          "content": "| Overview | Tutorial | Calculator | Binary | Grades | Graph | Life | Snake | . Frontend Web Development Overview . . Frontend web development is the development of the graphical user interface of a website, through the use of HTML, CSS, and JavaScript, so that users can view and interact with that website through a Browser. In this class, we will be using Fastpages on top of GitHub Pages to maximize our presentations, while minimizing our front-end coding. GitHub Pages deployment is performed through Jekyll, which regenerates the website automatically after each commit, tracking can be seen in Actions tab within GitHub. | HTML generation is performed through Liquid, a template language (similar to Jinja2 or Thymeleaf). | CSS style layout is provided by using Themes provided through GH Pages. Each page we make we assume the defined theme and insert our HTML fragments, local page style, and local page JavaScript. | JavaScript enables pages to have actions, fetch content, animate, etc | . . . Code in this Sub Menu . HTML, CSS, and JavaScript are the front-end of the Web. Many tools and languages complement development using markup, style and JavaScript. This section of the Nighthawk Coders CS website is providing some code samples. These are intended to spark your own PBL ideas. Each of these were generated after watching others teach or interacting with students. . Tutorial: This page is a FastPages _post. This page contains Markdown and HTML. Pull this file into VSCode and explore the fundamentals of making a content page. | Calculator: This calculator was inspired by Mr. Mortensen’s calculator that he built in Objective-C during his first year of teaching at DNHS (2019). It was recreated by former student Anthony using Fastpages, HTML, JavaScript, and CSS on this site in 2022. Creating a calculator helps developers to learn how to manage temporary data, manage presentation, associate input to calculator output, and work with logic | Visually it shows how math works within a language; specific functions, handling of strings, numbers, math, etc. | . | Binary: This example was created after watching Harvard CS50 by David J. Malan in 2020, he had built a machine to turn on and off lights/binary digits. My thought after watching machine, why not simulate that binary machine in software? Liquid is used to define a constant for the number of bits | JavaScript is used base 2, 8, 16 calculations | . | Grades: This grade calculator was created to show interaction of HTML and JavaScript to perform input. Additionally, it show how to add element to HTML Document Object Model (DOM). FYI, the IJavaScript kernel did not support input as of this writing. | Graph: This was created when a student named Bryant 2022 asked me the question “how would I plot data?” as described in an FRQ. JavaScript canvas is used to draw grid, axis, lines | . | Life: This was created by Nathaniel 2022 when I asked him about something interesting to show students in JS that relates to school. Built on Conway’s Game of Life (Wikipedia, Original) | Somewhat pure JavaScript, no canvas usage even though it has a grid. | . | Snake: This was interest of students in each of my 3 years, inspiration and some of the code came from a student named Nolan 2021. Contains menu and settings, as well as Grid | Uses JavaScript canvas and key events | . | .",
          "url": "https://leonard514.github.io//APCSP-Tri-2/frontend/overview",
          "relUrl": "/frontend/overview",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "API",
          "content": "| Overview | Covid19 RapidAPI | Jokes API | Users Database | . APIs in this Sub Menu . HTML, CSS, and JavaScript are the front-end of the API. Python and API resource definitions are used for RESTful API definitions. Abstraction of Frontend and Backend code, the exchange of standard data format (JSON), and guidelines for exchange (REST) is a technique that saves a lot of time between developers. Learning APIs is a highly recommended step for every developer trying to break into the world of tech. . Covid19: RapidAPI example. This is introducing APIs by accessing something that already exists. RapidAPI shows how many practice RESTful definitions. Almost any data source imagined can be accessed here. | Jokes: An introduction to Python RESTful API libraries. A Python List is used to make a Data Model, but persistence in this technique is limited, each time server is refreshed data is lost. This example is great for learning, but data is considered volatile. | Users: Another RESTful API library example. However, this backend establishes data persistence through the use of a database. This data if properly managed in deployment and migrated when changed can last forever. | . Web API Overview . . A Web API is an application programming interface typically for a web browser. Non-changing or Static Endpoints are used in interacting with the server-side Web APIs. RESTful Web APIs use HTTP methods to access resources via URL parameters, and use JSON for transmitting text between client and server. Server. In these examples, we will be using Python to define REST APIs. Python tools are very popular for building RESTful APIs | REST: Representational State Transfer. A set of guidelines on how to architect a network-connected software system. | Client-server: One guideline is a client and server must be decoupled from each other, allowing each to develop independently. | Layered system: The client may access the resources on the server indirectly through other layers such as a proxy or using authentication. This will be clarified by application and security requirements. | . Client. JavaScript is the frontend language used to consume data from the Python defined REST APIs. Fetch will be used to make HTTP requests, as well as handle HTTP response. There are four basic HTTP methods, they align with Create, Read, Update, Delete (CRUD). | GET =&gt; Retrieve/Read data | POST =&gt; Create data | PUT =&gt; Update data | DELETE =&gt; Delete data | . REST endpoints will have similarity from application to application. In planning APIs, for a Users system you can anticipate key methods. The Users RESTful APIs would likely contain these endpoints. | GET: /users =&gt; Get a list of users | GET: /users(id) =&gt; Get a single user | POST: /users =&gt; Create a new user | PUT: /users(id) =&gt; Update a user | DELETE: /users(id) =&gt; Delete a user | . Once a RESTful API receives and processes an HTTP request, it will return an HTTP response. Included in this response is an HTTP status code. Common status codes are shown. | 200 =&gt; OK, this response will then have the promise of JSON data | 400 =&gt; Bad Request | 404 =&gt; Not Found | 500 =&gt; Internal Server Error (aka bug) | . . . .",
          "url": "https://leonard514.github.io//APCSP-Tri-2/api/overview",
          "relUrl": "/api/overview",
          "date": ""
      }
      
  

  

  

  

  
      ,"page6": {
          "title": "About",
          "content": "This site is built with fastpages . Key Links . GitHub . Leonard | Ishi | Sanika | Emma | . Websites . Leonard’s FastPage | Ishi’s FastPage | Sanika’s FastPage | Emma’s Fastpage | .",
          "url": "https://leonard514.github.io//APCSP-Tri-2/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page8": {
          "title": "",
          "content": "Objectives . . This Conceptual Framework teaches College Boards 5 Big Ideas of AP Computer Science Principles, Python, JavaScript, and Web Site application development together in an integrated fashion. The purpose is to teach College Board requirements while adding languages, tools, frameworks, and methodologies that meet Career Technical Education (CTE) needs. The outcome is preparing the High School student for the AP Test and simultaneously building the skills required for Computer Science internships. . . Blogs .",
          "url": "https://leonard514.github.io//APCSP-Tri-2/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
  

  
  

  
  

  
      ,"page15": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://leonard514.github.io//APCSP-Tri-2/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}